def f(a, b, c)
    if(c == true)
        return a+b;
    else
        return a-b;
    end
end


def g(a, b, c, [d = 5])
    sum = 0;
    for i in (a..b)
        sum = (sum + i) / mod;
    end
    return sum + d;
end


def h(x, y, z)
    mult = 1;
    loop do
        mult = mult * (x / y);
        z = z-1;
        break if(z < (2 + len(a)));
    end
end



def get_function_pointer()
    return method(:hol);
end


def factorial(a)
    if(a == 1)
        return 1;
    else
        return a * factorial(dec(a));
    end
end



def select_index(list, select_index)
    return list[select_index];
end


def get_i_th_item(list, [index = 0])
    return list[index];
end



def good_test_case_for_arguments(a, b, c, d, [e = 5, h=10, g = 12])
    return (a+b)*(c+d)*(e+h) / g;
end


def f()
    return 0;
end


def first_node(a, b)
    if(a>b)
        h = 1;
        loop do
            h *= second_node(b);
            b = b+1;
            break if(a == b);
        end
    else
        h = 1;
        loop do
            h *= second_node(a);
            a = a+1;
            break if(a == b);
        end
    end
end


def second_node(a)
    return find_an_index(a);
end



def find_an_index(a)
    if(a > 0)
        for i in (a..a*a)
            if(i == 2*a)
                return fourth_node(a, a);
            else
                return fourth_node(a, i);
            end
        end
    else
        index = 0;
        loop do
            index += 1;
            break if(index == 0);
        end
        return fourth_node(a, index);

    end
end


def fourth_node(x, y)
    if(x>y)
        return x;
    else
        return first_node(x);
    end
end




def simple_loop1(a)
    b = a + simple_loop2(2);
    return b;
end


def simple_loop2(a)
    c = a + simple_loop1(3);
    return 3;
end






def main()
    my_list = ["hello", "this", "is", "sample", "testCase", "for", "CE", "Students"];
    hope_fully_hello = get_i_th_item(my_list);
    hope_fully_CE = get_i_th_item(my_list, 10);
    good_test_case_for_arguments(1, 2, 3);
    good_test_case_for_arguments(1, 2, 3, 4);
    good_test_case_for_arguments(1, 2, 3, 4, 5, 6, 7, 8);
end